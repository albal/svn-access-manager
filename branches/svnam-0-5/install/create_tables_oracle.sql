---------------------------------------------------------------------------------------------------------------------------------------------------
-- create sequences
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE SEQUENCE "SVNAM"."HELP_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."LOG_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."PREFERENCES_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."RIGHTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVN_ACCESS_RIGHTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVN_GROUPS_RESPONSIBLE_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVN_PROJECTS_MAILINGLISTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVN_PROJECTS_RESPONSIBLE_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVN_USERS_GROUPS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNGROUPS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNMAILINGLISTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNPASSWORDRESET_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNPROJECTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNREPOS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."SVNUSERS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."USER_RIGHTS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
CREATE SEQUENCE "SVNAM"."WORKINFO_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;

---------------------------------------------------------------------------------------------------------------------------------------------------
-- create tables
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
-- table help
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."HELP"
  (
    "ID"          NUMBER(*,0) NOT NULL ENABLE,
    "TOPIC"       VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "HEADLINE_EN" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "HEADLINE_DE" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "HELPTEXT_DE" CLOB NOT NULL ENABLE,
    "HELPTEXT_EN" CLOB NOT NULL ENABLE,
    CONSTRAINT "HELP_PK" PRIMARY KEY ("ID") ENABLE
  );

COMMENT ON TABLE "SVNAM"."HELP" IS 'Table of help texts';

CREATE INDEX "SVNAM"."HELP_TOPIC_IDX" ON "SVNAM"."HELP"
    (
      "TOPIC"
    );
    

CREATE OR REPLACE TRIGGER "SVNAM"."HELP_TRG" BEFORE
  INSERT ON SVNAM.HELP FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT HELP_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."HELP_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table log
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."LOG"
  (
    "ID" NUMBER(*,0) NOT NULL ENABLE,
    "LOGTIMESTAMP" VARCHAR2(14) NOT NULL ENABLE,
    "USERNAME"  VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "IPADDRESS" VARCHAR2(15 BYTE) NOT NULL ENABLE,
    "LOGMESSAGE" CLOB NOT NULL ENABLE,
    CONSTRAINT "LOG_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."LOG" IS 'Table of log messages';

CREATE INDEX "SVNAM"."LOGTIMESTAMP_IDX" ON "SVNAM"."LOG"
    (
      "LOGTIMESTAMP"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."LOG_TRG" BEFORE
  INSERT ON SVNAM.LOG FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT LOG_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."LOG_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table preferences
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."PREFERENCES"
  (
    "ID"               NUMBER(*,0) NOT NULL ENABLE,
    "USER_ID"          NUMBER(*,0) NOT NULL ENABLE,
    "PAGE_SIZE"        NUMBER(*,0) NOT NULL ENABLE,
    "USER_SORT_FIELDS" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "USER_SORT_ORDER"  VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "CREATED"          VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"     VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"         VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER"    VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"          VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"     VARCHAR2(255 BYTE) DEFAULT '',
    CONSTRAINT "PREFERENCES_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."PREFERENCES" IS 'Table of user preferences';

CREATE INDEX "SVNAM"."PREFERENCES_USER_ID_IDX" ON "SVNAM"."PREFERENCES"
    (
      "USER_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."PREFERENCES_TRG" BEFORE
  INSERT ON SVNAM.PREFERENCES FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT PREFERENCES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."PREFERENCES_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table workinfo
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."WORKINFO"
  (
    "ID" NUMBER(*,0) NOT NULL ENABLE,
    "USERTIMESTAMP" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP NOT NULL ENABLE,
    "ACTION" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "STATUS" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "TYPE"   VARCHAR2(255 BYTE) NOT NULL ENABLE,
    CONSTRAINT "WORKINFO_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."WORKINFO" IS 'Table of workinfos';

CREATE OR REPLACE TRIGGER "SVNAM"."WORKINFO_TRG" BEFORE
  INSERT ON SVNAM.WORKINFO FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT WORKINFO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."WORKINFO_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table rights
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."RIGHTS"
  (
    "ID"             NUMBER(*,0) NOT NULL ENABLE,
    "RIGHT_NAME"     VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "DESCRIPTION_EN" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "DESCRIPTION_DE" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "ALLOWED_ACTION" VARCHAR2(255 BYTE) DEFAULT 'none' NOT NULL ENABLE,
    "CREATED"        VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"   VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER"  VARCHAR2(155 BYTE) DEFAULT '',
    "DELETED"        VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"   VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "RIGHTS_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "RIGHTS_ALLOWED_ACTION_CHECK" CHECK (ALLOWED_ACTION = 'none'
  OR ALLOWED_ACTION                                                = 'read'
  OR ALLOWED_ACTION                                                = 'edit'
  OR ALLOWED_ACTION                                                = 'delete') ENABLE
  );

COMMENT ON TABLE "SVNAM"."RIGHTS" IS 'Table of rights to grant to users';

CREATE OR REPLACE TRIGGER "SVNAM"."RIGHTS_TRG" BEFORE
  INSERT ON SVNAM.RIGHTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT RIGHTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."RIGHTS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table sessions
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SESSIONS"
  (
    "SESSION_ID"      VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "SESSION_EXPIRES" NUMBER(*,0) DEFAULT 0 NOT NULL ENABLE,
    "SESSION_DATA" CLOB NOT NULL ENABLE,
    CONSTRAINT "SESSIONS_SESSION_EXPIRES_CHECK" CHECK (SESSION_EXPIRES >= 0) ENABLE
  );

COMMENT ON TABLE "SVNAM"."SESSIONS" IS 'Table of session information';

CREATE INDEX "SVNAM"."SESSIONS_SESSION_EXPIRES_IDX" ON "SVNAM"."SESSIONS"
    (
      "SESSION_EXPIRES"
    );
    

---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svngroups
---------------------------------------------------------------------------------------------------------------------------------------------------
    
CREATE TABLE "SVNAM"."SVNGROUPS"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "GROUPNAME"     VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "DESCRIPTION"   VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVNGROUPS_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVNGROUPS" IS 'Table of svn user groups';

CREATE INDEX "SVNAM"."SVNGROUPS_GROUPNAME_IDX" ON "SVNAM"."SVNGROUPS"
    (
      "GROUPNAME"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVNGROUPS_TRG" BEFORE
  INSERT ON SVNAM.SVNGROUPS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNGROUPS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNGROUPS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svnmailinglists
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVNMAILINGLISTS"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "MAILINGLIST"   VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "EMAILADDRESS"  VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "DESCRIPTION"   VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVNMAILINGLISTS_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVNMAILINGLISTS" IS 'Table of available svn mailing lists';

CREATE OR REPLACE TRIGGER "SVNAM"."SVNMAILINGLISTS_TRG" BEFORE
  INSERT ON SVNAM.SVNMAILINGLISTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNMAILINGLISTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNMAILINGLISTS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svnpasswordreset
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVNPASSWORDRESET"
  (
    "ID"       NUMBER(*,0) NOT NULL ENABLE,
    "UNIXTIME" NUMBER(*,0) NOT NULL ENABLE,
    "USERNAME" VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "TOKEN"    VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "IDSTR"    VARCHAR2(255 BYTE) NOT NULL ENABLE,
    CONSTRAINT "SVNPASSWORDRESET_PK" PRIMARY KEY ("ID")  ENABLE
  );
  
COMMENT ON TABLE "SVNAM"."SVNPASSWORDRESET" IS 'Table with password reset information';

CREATE OR REPLACE TRIGGER "SVNAM"."SVNPASSWORDRESET_TRG" BEFORE
  INSERT ON SVNAM.SVNPASSWORDRESET FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNPASSWORDRESET_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNPASSWORDRESET_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svnrepos
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVNREPOS"
  (
    "ID"                   NUMBER(*,0) NOT NULL ENABLE,
    "REPONAME"             VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "REPOPATH"             VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "REPOUSER"             VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "REPOPASSWORD"         VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DIFFERENT_AUTH_FILES" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
    "AUTH_USER_FILE"       VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "SVN_ACCESS_FILE"      VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "CREATED"              VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"         VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"             VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER"        VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"              VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"         VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVNREPOS_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVNREPOS" IS 'Table of svn repositories';

CREATE INDEX "SVNAM"."SVNREPOS_DELETED_IDX" ON "SVNAM"."SVNREPOS"
    (
      "DELETED"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVNREPOS_TRG" BEFORE
  INSERT ON SVNAM.SVNREPOS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNREPOS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNREPOS_TRG" ENABLE;

---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svnprojects
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVNPROJECTS"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "REPO_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "SVNMODULE"     VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "MODULEPATH"    VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "DESCRIPTION"   VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVNPROJECTS_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "SVNPROJECTS_REPO_ID_CHECK" CHECK (REPO_ID >= 0) ENABLE,
    CONSTRAINT "SVNPROJECTS_REPO_ID_FK" FOREIGN KEY ("REPO_ID") REFERENCES "SVNAM"."SVNREPOS" ("ID") ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVNPROJECTS" IS 'Table of svn modules';

CREATE INDEX "SVNAM"."SVNPROJECTS_DELETED_IDX" ON "SVNAM"."SVNPROJECTS"
    (
      "DELETED"
    );

CREATE INDEX "SVNAM"."SVNPROJECTS_REPO_ID_IDX" ON "SVNAM"."SVNPROJECTS"
    (
      "REPO_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVNPROJECTS_TRG" BEFORE
  INSERT ON SVNAM.SVNPROJECTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNPROJECTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNPROJECTS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svnusers
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVNUSERS"
  (
    "ID"                NUMBER(*,0) NOT NULL ENABLE,
    "USERID"            VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "NAME"              VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "GIVENNAME"         VARCHAR2(255 BYTE) NOT NULL ENABLE,
    "PASSWORD"          VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "PASSWORDEXPIRES"   NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
    "LOCKED"            NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
    "EMAILADDRESS"      VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "ADMIN"             VARCHAR2(1 BYTE) DEFAULT 'n' NOT NULL ENABLE,
    "USER_MODE"         VARCHAR2(10 BYTE) NOT NULL ENABLE,
    "CREATED"           VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"      VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"          VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER"     VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"           VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"      VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "PASSWORD_MODIFIED" VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "SUPERADMIN"        NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
    "SECURITYQUESTION"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "SECURITYANSWER"    VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVNUSERS_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVNUSERS" IS 'Table of all known users';

CREATE INDEX "SVNAM"."SVNUSERS_DELETED_IDX" ON "SVNAM"."SVNUSERS"
    (
      "DELETED"
    );

CREATE INDEX "SVNAM"."SVNUSERS_LOCKED_IDX" ON "SVNAM"."SVNUSERS"
    (
      "LOCKED"
    );

CREATE INDEX "SVNAM"."SVNUSERS_PASSWORDEXPIRES_IDX" ON "SVNAM"."SVNUSERS"
    (
      "PASSWORDEXPIRES"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVNUSERS_TRG" BEFORE
  INSERT ON SVNAM.SVNUSERS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVNUSERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVNUSERS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svn_access_rights
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVN_ACCESS_RIGHTS"
  (
    "ID"         NUMBER(*,0) NOT NULL ENABLE,
    "PROJECT_ID" NUMBER(*,0),
    "USER_ID"    NUMBER(*,0),
    "GROUP_ID"   NUMBER(*,0),
    "PATH" 	 VARCHAR2(4000) NOT NULL ENABLE,
    "VALID_FROM"    VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "VALID_UNTIL"   VARCHAR2(14 BYTE) DEFAULT 99999999999999 NOT NULL ENABLE,
    "ACCESS_RIGHT"  VARCHAR2(255 BYTE) DEFAULT 'none' NOT NULL ENABLE,
    "RECURSIVE"     VARCHAR2(255 BYTE) DEFAULT 'yes' NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVN_ACCESS_RIGHTS_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "SVN_ACCESS_RECURSIVE_CHECK" CHECK (RECURSIVE        = 'yes'
  OR RECURSIVE                                                      = 'no') ENABLE,
    CONSTRAINT "SVN_ACCESS_RIGHTS_ACCESS_CHECK" CHECK (ACCESS_RIGHT = 'none'
  OR ACCESS_RIGHT                                                   = 'read'
  OR ACCESS_RIGHT                                                   = 'write') ENABLE,
    CONSTRAINT "SVN_ACCESS_RIGHTS_SVNGROU_FK1" FOREIGN KEY ("GROUP_ID") REFERENCES "SVNAM"."SVNGROUPS" ("ID") ON
  DELETE CASCADE ENABLE,
    CONSTRAINT "SVN_ACCESS_RIGHTS_SVNPROJ_FK1" FOREIGN KEY ("PROJECT_ID") REFERENCES "SVNAM"."SVNPROJECTS" ("ID") ON
  DELETE CASCADE ENABLE,
    CONSTRAINT "SVN_ACCESS_RIGHTS_SVNUSER_FK1" FOREIGN KEY ("USER_ID") REFERENCES "SVNAM"."SVNUSERS" ("ID") ON
  DELETE CASCADE ENABLE
  );
  
COMMENT ON TABLE "SVNAM"."SVN_ACCESS_RIGHTS" IS 'Table of user or group access rights';

CREATE INDEX "SVNAM"."SVNACCESSRIGHTSPROJECTID_IDX" ON "SVNAM"."SVN_ACCESS_RIGHTS"
    (
      "PROJECT_ID"
    );

CREATE INDEX "SVNAM"."SVN_ACCESS_RIGHTS_DELETED_IDX" ON "SVNAM"."SVN_ACCESS_RIGHTS"
    (
      "DELETED"
    );

CREATE INDEX "SVNAM"."SVN_ACCESS_RIGHTS_GROUP_ID_IDX" ON "SVNAM"."SVN_ACCESS_RIGHTS"
    (
      "GROUP_ID"
    );

CREATE INDEX "SVNAM"."SVN_ACCESS_RIGHTS_USER_ID_IDX" ON "SVNAM"."SVN_ACCESS_RIGHTS"
    (
      "USER_ID"
    );
    
CREATE OR REPLACE TRIGGER "SVNAM"."SVN_ACCESS_RIGHTS_TRG" BEFORE
  INSERT ON SVNAM.SVN_ACCESS_RIGHTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVN_ACCESS_RIGHTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVN_ACCESS_RIGHTS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svn_groups_respponsible
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVN_GROUPS_RESPONSIBLE"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "USER_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "GROUP_ID"      NUMBER(*,0) NOT NULL ENABLE,
    "ALLOWED"       VARCHAR2(255 BYTE) DEFAULT 'none' NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVN_GROUPS_RESPONSIBLE_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "ALLOWED_CHECK" CHECK (ALLOWED    = 'none'
  OR ALLOWED                                     = 'read'
  OR ALLOWED                                     = 'edit'
  OR ALLOWED                                     = 'delete') ENABLE,
    CONSTRAINT "GROUP_ID_CHECK" CHECK (GROUP_ID >= 0) ENABLE,
    CONSTRAINT "USER_ID_CHECK" CHECK (USER_ID   >= 0) ENABLE,
    CONSTRAINT "SVN_GROUPS_RESPONSIBLE_SV_FK1" FOREIGN KEY ("USER_ID") REFERENCES "SVNAM"."SVNUSERS" ("ID") ON
  DELETE CASCADE ENABLE,
    CONSTRAINT "SVN_GROUPS_RESPONSIBLE_SV_FK2" FOREIGN KEY ("ID") REFERENCES "SVNAM"."SVNGROUPS" ("ID") ON
  DELETE CASCADE ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVN_GROUPS_RESPONSIBLE" IS 'Table of group responsible people';
  
CREATE INDEX "SVNAM"."DELETED_IDX" ON "SVNAM"."SVN_GROUPS_RESPONSIBLE"
    (
      "DELETED"
    );
    
CREATE INDEX "SVNAM"."SVN_GROUPS_RESPONSIBLE_1_IDX" ON "SVNAM"."SVN_GROUPS_RESPONSIBLE"
    (
      "USER_ID",
      "GROUP_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVN_GROUPS_RESPONSIBLE_TRG" BEFORE
  INSERT ON SVNAM.SVN_GROUPS_RESPONSIBLE FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVN_GROUPS_RESPONSIBLE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVN_GROUPS_RESPONSIBLE_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svn_projects_mailinglists
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVN_PROJECTS_MAILINGLISTS"
  (
    "ID"               NUMBER(*,0) NOT NULL ENABLE,
    "PROJECT_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "MAILINGLISTEN_ID" NUMBER(*,0) NOT NULL ENABLE,
    "CREATED"          VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"     VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"         VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER"    VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"          VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETD_USER"      VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVN_PROJECTS_MAILINGLISTS_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "SVN_PROJECTS_MAILINGLISTS_FK1" FOREIGN KEY ("PROJECT_ID") REFERENCES "SVNAM"."SVNPROJECTS" ("ID") ON
  DELETE CASCADE ENABLE,
    CONSTRAINT "SVN_PROJECTS_MAILINGLISTS_FK2" FOREIGN KEY ("MAILINGLISTEN_ID") REFERENCES "SVNAM"."SVNMAILINGLISTS" ("ID") ON
  DELETE CASCADE ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVN_PROJECTS_MAILINGLISTS" IS 'Table of modules and mailinglist relations';

CREATE INDEX "SVNAM"."MAILINGLISTEN_ID_IDX" ON "SVNAM"."SVN_PROJECTS_MAILINGLISTS"
    (
      "MAILINGLISTEN_ID"
    );

CREATE INDEX "SVNAM"."MAILINGLISTS_1_IDX" ON "SVNAM"."SVN_PROJECTS_MAILINGLISTS"
    (
      "PROJECT_ID",
      "MAILINGLISTEN_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVN_PROJECTS_MAILINGLISTS_TRG" BEFORE
  INSERT ON SVNAM.SVN_PROJECTS_MAILINGLISTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVN_PROJECTS_MAILINGLISTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVN_PROJECTS_MAILINGLISTS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svn_projects_responsible
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVN_PROJECTS_RESPONSIBLE"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "PROJECT_ID"    NUMBER(*,0) NOT NULL ENABLE,
    "USER_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVN_PROJECTS_RESPONSIBLE_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVN_PROJECTS_RESPONSIBLE" IS 'Table of project responsible users';

CREATE INDEX "SVNAM"."PRJ_RESP_DELETED_IDX" ON "SVNAM"."SVN_PROJECTS_RESPONSIBLE"
    (
      "DELETED"
    );

CREATE INDEX "SVNAM"."PRJ_RESP_PROJECT_ID_IDX" ON "SVNAM"."SVN_PROJECTS_RESPONSIBLE"
    (
      "PROJECT_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVN_PROJECTS_RESPONSIBLE_TRG" BEFORE
  INSERT ON SVNAM.SVN_PROJECTS_RESPONSIBLE FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVN_PROJECTS_RESPONSIBLE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVN_PROJECTS_RESPONSIBLE_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table svn_users_groups
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."SVN_USERS_GROUPS"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "USER_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "GROUP_ID"      NUMBER(*,0) NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "SVN_USERS_GROUPS_PK" PRIMARY KEY ("ID")  ENABLE
  );

COMMENT ON TABLE "SVNAM"."SVN_USERS_GROUPS" IS 'Table of user group relations';

CREATE INDEX "SVNAM"."SVN_USERS_GROUPS_DELETED_IDX" ON "SVNAM"."SVN_USERS_GROUPS"
    (
      "DELETED"
    );

CREATE INDEX "SVNAM"."SVN_USERS_GROUPS_GROUP_ID_IDX" ON "SVNAM"."SVN_USERS_GROUPS"
    (
      "GROUP_ID"
    );

CREATE INDEX "SVNAM"."SVN_USERS_GROUPS_USER_ID_IDX" ON "SVNAM"."SVN_USERS_GROUPS"
    (
      "USER_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."SVN_USERS_GROUPS_TRG" BEFORE
  INSERT ON SVNAM.SVN_USERS_GROUPS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT SVN_USERS_GROUPS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."SVN_USERS_GROUPS_TRG" ENABLE;


---------------------------------------------------------------------------------------------------------------------------------------------------
-- table user_rights
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE "SVNAM"."USER_RIGHTS"
  (
    "ID"            NUMBER(*,0) NOT NULL ENABLE,
    "USER_ID"       NUMBER(*,0) NOT NULL ENABLE,
    "RIGHT_ID"      NUMBER(*,0) NOT NULL ENABLE,
    "ALLOWED"       VARCHAR2(255 BYTE) DEFAULT 'none' NOT NULL ENABLE,
    "CREATED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "CREATED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "MODIFIED"      VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "MODIFIED_USER" VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    "DELETED"       VARCHAR2(14 BYTE) DEFAULT 00000000000000 NOT NULL ENABLE,
    "DELETED_USER"  VARCHAR2(255 BYTE) DEFAULT '' NOT NULL ENABLE,
    CONSTRAINT "USER_RIGHTS_PK" PRIMARY KEY ("ID")  ENABLE,
    CONSTRAINT "USERS_RIGHTS_ALLOWED_CHECK" CHECK (ALLOWED = 'none'
  OR ALLOWED                                               = 'read'
  OR ALLOWED                                               = 'add'
  OR ALLOWED                                               = 'edit'
  OR ALLOWED                                               = 'delete') ENABLE,
    CONSTRAINT "USERS_RIGHTS_RIGHT_ID_FKEY" FOREIGN KEY ("ID") REFERENCES "SVNAM"."RIGHTS" ("ID") ON
  DELETE CASCADE ENABLE,
    CONSTRAINT "USERS_RIGHTS_USER_ID_FKEY" FOREIGN KEY ("ID") REFERENCES "SVNAM"."SVNUSERS" ("ID") ON
  DELETE CASCADE ENABLE
  );

COMMENT ON TABLE "SVNAM"."USER_RIGHTS" IS 'Table of granted user rights';

CREATE INDEX "SVNAM"."USERS_RIGHTS_RIGHT_ID_IDX" ON "SVNAM"."USER_RIGHTS"
    (
      "RIGHT_ID"
    );

CREATE INDEX "SVNAM"."USERS_RIGHTS_USER_ID_IDX" ON "SVNAM"."USER_RIGHTS"
    (
      "USER_ID"
    );

CREATE OR REPLACE TRIGGER "SVNAM"."USER_RIGHTS_TRG" BEFORE
  INSERT ON SVNAM.USER_RIGHTS FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN IF :NEW.ID IS NULL THEN
  SELECT USER_RIGHTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SVNAM"."USER_RIGHTS_TRG" ENABLE;
